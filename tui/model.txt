//package main
//
//import (
//	//"github.com/charmbracelet/bubbles/help"
//	"github.com/charmbracelet/lipgloss"
//	//"github.com/charmbracelet/bubbles/key"
//	//"github.com/charmbracelet/bubbles/list"
//	tea "github.com/charmbracelet/bubbletea"
//	//"github.com/charmbracelet/lipgloss"
//)
//
//type Model struct {
//    text string
//    //list list.Model
//    loaded bool
//    quitting bool
////    height int
////    width int
//}
//
//func NewModel(text string) *Model {
//    model := Model{
//        text: text,
//    } 
////    help := help.New()
////    help.ShowAll = true
//    return &model
//}
//
//func (m *Model) initData() {
//	//m.list.Title = "Language"
////	m.list.SetItems([]list.Item{
////        ListItem{title: "Spanish"},
////        ListItem{title: "French"},
////        ListItem{title: "Japanese"},
////	})
//}
//
//func (m Model) Init() tea.Cmd {
//    return nil
//}
//
//// WIP
//func (m Model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
//    //var cmd tea.Cmd
//    switch msg := msg.(type) {
//	case tea.WindowSizeMsg:
//		var cmd tea.Cmd
//		var cmds []tea.Cmd
//		cmds = append(cmds, cmd)
//		m.loaded = true
//		return m, tea.Batch(cmds...)
//    case tea.KeyMsg:
//		switch msg.String() {
//        case "l", "tab":
//            n = NewModel("Second")
//            return n, nil
//        case "q", "ctrl+c":
//			m.quitting = true
//			return m, tea.Quit
//		}
//	}
//
//    return m, nil
//}
//
//// WIP
//func (m Model) View() string {
//
//    if m.quitting {
//        return ""
//    }
//    if !m.loaded {
//        return "loading..."
//    }
//
//    return lipgloss.NewStyle().Render(m.text)
//}
